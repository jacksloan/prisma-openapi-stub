datasource database {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson", "fullTextSearch"]
}

generator prismaOpenApiStub {
  provider = "node -r ts-node/register/transpile-only src/index.ts"
  output   = "../@generated"
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String    @unique
  password         String
  bio              String?
  image            String?
  following        User[]    @relation("UserFollows", references: [id])
  followers        User[]    @relation("UserFollows", references: [id])
  favoriteArticles Article[] @relation(name: "FavoritedArticles", references: [id])
  articles         Article[] @relation("ArticleAuthor")
  comments         Comment[]
  countComments    Int?
  rating           Float?
  role             Role?
  profile          Profile?

  @@unique([email, name])
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  articles Article[]
}

model Article {
  id             String    @id @default(cuid())
  slug           String    @unique
  title          String
  description    String
  body           String
  tags           Tag[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoritesCount Int       @default(0)
  author         User      @relation(name: "ArticleAuthor", fields: [authorId], references: [id])
  authorId       String
  favoritedBy    User[]    @relation(name: "FavoritedArticles", references: [id])
  comments       Comment[]
  active         Boolean?  @default(true)
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  article   Article? @relation(fields: [articleId], references: [id])
  articleId String?
}

enum Role {
  USER
}

model Profile {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
  dummy  String?
}

model Dummy {
  id      String   @id
  created DateTime @default(now())
  floaty  Float
  int     Int?
  float   Float?
  bytes   Bytes?
  decimal Decimal?
  bigInt  BigInt?
  json    Json?
  friends String[]
}
